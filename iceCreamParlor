I wasnt able to figure out how to make this function recursive but I was still able to get the answers iteratively. Sorry about that.

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'icecreamParlor' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER m
     *  2. INTEGER_ARRAY arr
     */

    public static List<Integer> ParlorFunction(int m, List<Integer> arr) {
        List<Integer> combo = new ArrayList<>();

        for (int i = 0; i < arr.size(); i++) {
            int base = m - arr.get(i);
            for (int j = i + 1; j < arr.size(); j++) {
                if (arr.get(j) == base) {
                    combo.add(i + 1);
                    combo.add(j + 1);
                }
        }
        }
        return combo;
        
    }

    public static int icecreamParlor(int m, List<Integer> arr) {
        List<Integer> copy_arr = new ArrayList<>(arr);

        List<Integer> sum1 = ParlorFunction(m, arr);
        List<Integer> sum2 = ParlorFunction(m, copy_arr);

        if (sum1.size() == sum2.size()) {
            return sum1.size() / 2; 
        }

        return 0;
    }
}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int m = Integer.parseInt(bufferedReader.readLine().trim());

                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                Integer result = Result.icecreamParlor(m, arr);
                bufferedWriter.write(result.toString() + "\n");
                
                // bufferedWriter.write(
                //     result.stream()
                //         .map(Object::toString)
                //         .collect(joining(" "))
                //     + "\n"
                // );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
